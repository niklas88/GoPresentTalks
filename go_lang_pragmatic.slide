
The Go Programming Language
Pragmatic Programming
1 Aug 2017
Tags: go, pragmatic, programming, language

Niklas Schnelle
University of Freiburg
schnelle@informatik.uni-freiburg.de
@spacenick88

* Introduction

Go is a compiled, statically typed and garbage collected systems programming
language designed primarily for backend services. It was originally created
in 2009 by Rob Pike and Ken Thompson at Google.

And this is what it looks like at a glance (we will look at the full code later)
.play -edit hello.go /func main/,

* Environment

As a language designed at Google, Go targets a specific environment

- Large projects with relatively high developer fluctuation
- Diverse developer backgrounds from novice to the inventors of Unix
- Distributed and concurrent systems
- Heterogeneous hardware and software platforms yet stability is paramount
- Most software runs on a full OS not on microcontrollers

* Language Design

So how does Go help with *large* *projects*?

- Go comes with extensive tooling for _build_, _test_, _documentation_, _profiling_â€¦
- Support for internal versioning of libraries (called _vendoring_)
- Projects and workspaces use a standard layout
.code workspace.txt

* Language Design

And *diverse* *developer* *backgrounds*?

- Approachable documentation [[https://tour.golang.org]]
- Simple but strict type system, no classes just interfaces and some gernic types
- Batteries included: _Networking_, _JSON_, _HTTP(S)_, _JPEG_, _cryptography_, _parsing_ _Go_
- Garbage collection but with non-escaping variables on the stack and *defer* for executing functions on scope exit
- Enforced best practices: Explicit type conversion, no unused variables
- Automatic standard formatting used almost exclusively
.play -edit enforced.go /START OMIT/,/END OMIT/

* Language Design

What about *concurrency*?

- First class support for concurrency: _Goroutines_, strictly typed channels
- _Goroutines_ are light-weight threads with full CPU parallelism
- Synchronous IO in _Goroutines_ becomes asynchronous at the OS level
.play -edit concurrency.go /START OMIT/,/END OMIT/ HLconc

* Language Design

What about *distributed* and *heterogeneous* systems?

- Out of the box: _networking_, _HTTP_, _databases_, _remote_ _profiling_ etc.
- Simple blocking IO leads to very readable networking code
- Native cross compilation 
.code cross.txt
- Default static compilation creates independence from system libraries
- _Goroutines_ allow for effective scaling
- Operating System functionality like filesystems, clocks, threads and locks are assumed available

* Resolution

So what's behind the "Hello, World" example?
.play -edit hello.go /START OMIT/,/END OMIT/ HLstruct

* Resolution

So what's behind the "Hello, World" example?

.play -edit hello.go /START OMIT/,/END OMIT/ HLescape

* Resolution

So what's behind the "Hello, World" example?

.play -edit hello.go /START OMIT/,/END OMIT/ HLdefer

* Resolution

So what's behind the "Hello, World" example?

.play -edit hello.go /START OMIT/,/END OMIT/ HLgo

* Resolution

So what's behind the "Hello, World" example?

.play -edit hello.go /START OMIT/,/END OMIT/ HLchan

* References

- [[https://golang.org/doc/effective_go.html]]
- [[https://dave.cheney.net/2015/08/22/cross-compilation-with-go-1-5]]
- [[https://morsmachine.dk/netpoller]]