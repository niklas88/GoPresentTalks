
The Go Programming Language
Pragmatic Programming
21 Jun 2017
Tags: go, pragmatic, programming, language

Niklas Schnelle
University of Freiburg
schnelle@informatik.uni-freiburg.de
@spacenick88

* Introduction

Go is a compiled, statically typed and garbage collected programming
language designed primarily for backend development

And this is what it looks like at a glance
.play -edit hello.go /func main/,

* Environment

As a language originally designed at Google Go targets a special environment

- Large and long-lived projects
- Diverse developer backgrounds from novice to the inventors of C
- Distributed systems and concurrency everywhere
- Systems are heterogeneous yet stability is paramount
- Almost all software runs on a full OS

* Language Design Approach

So how does Go help with *large* *projects*?

- Go comes with extensive tooling for _building_, _testing_, _documenting_, _profiling_â€¦
- Projects may use internal versions of libraries (called _vendoring_)
- Projects and workspaces use a standard layout
.code workspace.txt

* Language Design Approach

And *diverse* *developer* *backgrounds*?

- Approachable documentation [[https://tour.golang.org]]
- Simple but strict type system, no classes just interfaces
- Batteries included: _Networking_, _JSON_, _HTTP(S)_, _JPEG_, _cryptography_, _parsing_ _Go_
- Garbage collection but with non-escaping variables on the stack and *defer* for executing functions on scope exit
- Enforced best practices: Explicit type conversion, no unused variables
.play -edit enforced.go /START OMIT/,/END OMIT/

* Language Design Approach

What about distributed systems?

- Support for concurrency via _Goroutines_ - like threads but cheaper
- Synchronous IO in _Goroutines_ becomes asynchronous at the OS level
.play -edit concurrency.go

* Resolution

So what's behind the "Hello, World" example?
.play -edit hello.go /START OMIT/,/END OMIT/

* Resolution

So what's behind the "Hello, World" example?

.play -edit hello.go /START OMIT/,/END OMIT/ HLescape

* Resolution

So what's behind the "Hello, World" example?

.play -edit hello.go /START OMIT/,/END OMIT/ HLdefer

* Resolution

So what's behind the "Hello, World" example?

.play -edit hello.go /START OMIT/,/END OMIT/ HLgo

* Resolution

So what's behind the "Hello, World" example?

.play -edit hello.go /START OMIT/,/END OMIT/ HLchan
